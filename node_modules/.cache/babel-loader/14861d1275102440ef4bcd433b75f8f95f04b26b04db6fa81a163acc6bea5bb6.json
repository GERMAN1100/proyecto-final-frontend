{"ast":null,"code":"import propertyData from './datos.json';\nfunction getPropertyFactor(category, type) {\n  const property = propertyData.find(item => item.categoria === category && item.tipo === type);\n  return property ? property.factor : 1.0;\n}\nfunction brandBudget(budget, category, type, squareMeters) {\n  const factor = getPropertyFactor(category, type);\n  const costPerSquareMeter = 35.86;\n\n  // Verificamos que los valores sean numéricos y no NaN\n  if (isNaN(budget) || isNaN(factor) || isNaN(squareMeters)) {\n    console.error(\"Error: Los valores no son numéricos\");\n    return 0; // o el valor que desees en caso de error\n  }\n\n  // Calculamos el presupuesto incluyendo metros cuadrados\n  const budgetWithSquareMeters = budget + budget * factor * squareMeters * costPerSquareMeter;\n  return parseFloat(budgetWithSquareMeters).toFixed(2);\n}\nexport default function getFinalBudget(budget, category, type, squareMeters) {\n  // Asegurémonos de que squareMeters tenga un valor numérico\n  squareMeters = parseFloat(squareMeters) || 0;\n\n  // Llamamos a brandBudget con squareMeters\n  return brandBudget(budget, category, type, squareMeters);\n}","map":{"version":3,"names":["propertyData","getPropertyFactor","category","type","property","find","item","categoria","tipo","factor","brandBudget","budget","squareMeters","costPerSquareMeter","isNaN","console","error","budgetWithSquareMeters","parseFloat","toFixed","getFinalBudget"],"sources":["C:/Users/User/Desktop/front/react/tp_final/src/Helper.jsx"],"sourcesContent":["import propertyData from './datos.json';\r\n\r\nfunction getPropertyFactor(category, type) {\r\n  const property = propertyData.find(item => item.categoria === category && item.tipo === type);\r\n  return property ? property.factor : 1.0;\r\n}\r\n\r\nfunction brandBudget(budget, category, type, squareMeters) {\r\n  const factor = getPropertyFactor(category, type);\r\n  const costPerSquareMeter = 35.86;\r\n\r\n  // Verificamos que los valores sean numéricos y no NaN\r\n  if (isNaN(budget) || isNaN(factor) || isNaN(squareMeters)) {\r\n    console.error(\"Error: Los valores no son numéricos\");\r\n    return 0; // o el valor que desees en caso de error\r\n  }\r\n\r\n  // Calculamos el presupuesto incluyendo metros cuadrados\r\n  const budgetWithSquareMeters = budget + (budget * factor * squareMeters * costPerSquareMeter);\r\n  \r\n  return parseFloat(budgetWithSquareMeters).toFixed(2);\r\n}\r\n\r\nexport default function getFinalBudget(budget, category, type, squareMeters) {\r\n  // Asegurémonos de que squareMeters tenga un valor numérico\r\n  squareMeters = parseFloat(squareMeters) || 0;\r\n\r\n  // Llamamos a brandBudget con squareMeters\r\n  return brandBudget(budget, category, type, squareMeters);\r\n}\r\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,cAAc;AAEvC,SAASC,iBAAiBA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EACzC,MAAMC,QAAQ,GAAGJ,YAAY,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKL,QAAQ,IAAII,IAAI,CAACE,IAAI,KAAKL,IAAI,CAAC;EAC7F,OAAOC,QAAQ,GAAGA,QAAQ,CAACK,MAAM,GAAG,GAAG;AACzC;AAEA,SAASC,WAAWA,CAACC,MAAM,EAAET,QAAQ,EAAEC,IAAI,EAAES,YAAY,EAAE;EACzD,MAAMH,MAAM,GAAGR,iBAAiB,CAACC,QAAQ,EAAEC,IAAI,CAAC;EAChD,MAAMU,kBAAkB,GAAG,KAAK;;EAEhC;EACA,IAAIC,KAAK,CAACH,MAAM,CAAC,IAAIG,KAAK,CAACL,MAAM,CAAC,IAAIK,KAAK,CAACF,YAAY,CAAC,EAAE;IACzDG,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IACpD,OAAO,CAAC,CAAC,CAAC;EACZ;;EAEA;EACA,MAAMC,sBAAsB,GAAGN,MAAM,GAAIA,MAAM,GAAGF,MAAM,GAAGG,YAAY,GAAGC,kBAAmB;EAE7F,OAAOK,UAAU,CAACD,sBAAsB,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC;AACtD;AAEA,eAAe,SAASC,cAAcA,CAACT,MAAM,EAAET,QAAQ,EAAEC,IAAI,EAAES,YAAY,EAAE;EAC3E;EACAA,YAAY,GAAGM,UAAU,CAACN,YAAY,CAAC,IAAI,CAAC;;EAE5C;EACA,OAAOF,WAAW,CAACC,MAAM,EAAET,QAAQ,EAAEC,IAAI,EAAES,YAAY,CAAC;AAC1D"},"metadata":{},"sourceType":"module","externalDependencies":[]}