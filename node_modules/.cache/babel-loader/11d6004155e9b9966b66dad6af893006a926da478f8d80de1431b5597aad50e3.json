{"ast":null,"code":"import propertyData from './datos.json';\nfunction getPropertyFactor(category, type) {\n  const property = propertyData.find(item => item.categoria === category && item.tipo === type);\n  return property ? property.factor : 1.0; // Devuelve 1.0 si no se encuentra la propiedad\n}\nfunction brandBudget(budget, category, type, squareMeters) {\n  const factor = getPropertyFactor(category, type);\n  const costPerSquareMeter = 35.86; // Puedes ajustar este valor según tus necesidades\n\n  // Verifica que los valores sean numéricos y no NaN\n  if (isNaN(budget) || isNaN(factor) || isNaN(squareMeters)) {\n    return 0; // o el valor que desees en caso de error\n  }\n  return budget + budget * factor * squareMeters * costPerSquareMeter;\n}\nexport default function getFinalBudget(budget, category, type, squareMeters) {\n  return parseFloat(brandBudget(budget, category, type, squareMeters)).toFixed(2);\n}","map":{"version":3,"names":["propertyData","getPropertyFactor","category","type","property","find","item","categoria","tipo","factor","brandBudget","budget","squareMeters","costPerSquareMeter","isNaN","getFinalBudget","parseFloat","toFixed"],"sources":["C:/Users/User/Desktop/front/react/tp_final/src/Helper.jsx"],"sourcesContent":["import propertyData from './datos.json'; \r\n\r\n\r\nfunction getPropertyFactor(category, type) {\r\n  const property = propertyData.find(item => item.categoria === category && item.tipo === type);\r\n  return property ? property.factor : 1.0; // Devuelve 1.0 si no se encuentra la propiedad\r\n}\r\n\r\nfunction brandBudget(budget, category, type, squareMeters) {\r\n  const factor = getPropertyFactor(category, type);\r\n  const costPerSquareMeter = 35.86; // Puedes ajustar este valor según tus necesidades\r\n\r\n  // Verifica que los valores sean numéricos y no NaN\r\n  if (isNaN(budget) || isNaN(factor) || isNaN(squareMeters)) {\r\n    return 0; // o el valor que desees en caso de error\r\n  }\r\n\r\n  return budget + (budget * factor * squareMeters * costPerSquareMeter);\r\n}\r\n\r\nexport default function getFinalBudget(budget, category, type, squareMeters) {\r\n  return parseFloat(brandBudget(budget, category, type, squareMeters)).toFixed(2);\r\n}\r\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,cAAc;AAGvC,SAASC,iBAAiBA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EACzC,MAAMC,QAAQ,GAAGJ,YAAY,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKL,QAAQ,IAAII,IAAI,CAACE,IAAI,KAAKL,IAAI,CAAC;EAC7F,OAAOC,QAAQ,GAAGA,QAAQ,CAACK,MAAM,GAAG,GAAG,CAAC,CAAC;AAC3C;AAEA,SAASC,WAAWA,CAACC,MAAM,EAAET,QAAQ,EAAEC,IAAI,EAAES,YAAY,EAAE;EACzD,MAAMH,MAAM,GAAGR,iBAAiB,CAACC,QAAQ,EAAEC,IAAI,CAAC;EAChD,MAAMU,kBAAkB,GAAG,KAAK,CAAC,CAAC;;EAElC;EACA,IAAIC,KAAK,CAACH,MAAM,CAAC,IAAIG,KAAK,CAACL,MAAM,CAAC,IAAIK,KAAK,CAACF,YAAY,CAAC,EAAE;IACzD,OAAO,CAAC,CAAC,CAAC;EACZ;EAEA,OAAOD,MAAM,GAAIA,MAAM,GAAGF,MAAM,GAAGG,YAAY,GAAGC,kBAAmB;AACvE;AAEA,eAAe,SAASE,cAAcA,CAACJ,MAAM,EAAET,QAAQ,EAAEC,IAAI,EAAES,YAAY,EAAE;EAC3E,OAAOI,UAAU,CAACN,WAAW,CAACC,MAAM,EAAET,QAAQ,EAAEC,IAAI,EAAES,YAAY,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC,CAAC;AACjF"},"metadata":{},"sourceType":"module","externalDependencies":[]}